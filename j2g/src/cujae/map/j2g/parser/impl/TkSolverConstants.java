/* Generated By:JavaCC: Do not edit this line. TkSolverConstants.java */
package cujae.map.j2g.parser.impl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface TkSolverConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CALL = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int THEN = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int INCLUDE = 9;
  /** RegularExpression Id. */
  int DECLARE = 10;
  /** RegularExpression Id. */
  int PLUS = 11;
  /** RegularExpression Id. */
  int MINUS = 12;
  /** RegularExpression Id. */
  int MULTIPLY = 13;
  /** RegularExpression Id. */
  int DIVIDE = 14;
  /** RegularExpression Id. */
  int POW = 15;
  /** RegularExpression Id. */
  int LOWER_THAN = 16;
  /** RegularExpression Id. */
  int GREATER_THAN = 17;
  /** RegularExpression Id. */
  int EQUAL = 18;
  /** RegularExpression Id. */
  int LOWER_THAN_EQUAL = 19;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 20;
  /** RegularExpression Id. */
  int NOT_EQUAL = 21;
  /** RegularExpression Id. */
  int ASSIGN = 22;
  /** RegularExpression Id. */
  int LPARENT = 23;
  /** RegularExpression Id. */
  int RPARENT = 24;
  /** RegularExpression Id. */
  int LSQUARE = 25;
  /** RegularExpression Id. */
  int RSQUARE = 26;
  /** RegularExpression Id. */
  int SEMICOLON = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int LETTER = 29;
  /** RegularExpression Id. */
  int DIGIT = 30;
  /** RegularExpression Id. */
  int EXPONENT = 31;
  /** RegularExpression Id. */
  int LETTER_DIGIT = 32;
  /** RegularExpression Id. */
  int NAME = 33;
  /** RegularExpression Id. */
  int SYMBOLIC = 34;
  /** RegularExpression Id. */
  int NUMERIC = 35;
  /** RegularExpression Id. */
  int LITERAL = 36;
  /** RegularExpression Id. */
  int E_COMMENT = 37;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int EndComment0 = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"call\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"include\"",
    "\"declare\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "<LOWER_THAN_EQUAL>",
    "<GREATER_THAN_EQUAL>",
    "<NOT_EQUAL>",
    "\":=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "<LETTER>",
    "<DIGIT>",
    "<EXPONENT>",
    "<LETTER_DIGIT>",
    "<NAME>",
    "<SYMBOLIC>",
    "<NUMERIC>",
    "<LITERAL>",
    "<E_COMMENT>",
  };

}
